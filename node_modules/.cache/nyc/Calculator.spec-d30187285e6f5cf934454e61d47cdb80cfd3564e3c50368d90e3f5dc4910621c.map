{"version":3,"file":"/home/nadav/Desktop/tryCode/ts-workspace/src/Calculator.spec.ts","sources":["/home/nadav/Desktop/tryCode/ts-workspace/src/Calculator.spec.ts"],"names":[],"mappings":";;;;;AAAA,iCAAiD;AACjD,oDAA4B;AAC5B,iCAA4B;AAC5B,6CAA0C;AAE1C,IAAA,gBAAQ,EAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,IAAI,UAAsB,CAAC;IAE3B,IAAA,kBAAU,EAAC,GAAG,EAAE;QACd,UAAU,GAAG,IAAI,uBAAU,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,IAAA,gBAAQ,EAAC,KAAK,EAAE,GAAG,EAAE;QACnB,IAAA,UAAE,EAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,gBAAM,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,IAAA,UAAE,EAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,gBAAM,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,gBAAQ,EAAC,UAAU,EAAE,GAAG,EAAE;QACxB,IAAA,UAAE,EAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,gBAAM,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,gBAAQ,EAAC,UAAU,EAAE,GAAG,EAAE;QACxB,IAAA,UAAE,EAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,gBAAM,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,gBAAQ,EAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,IAAA,UAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,gBAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,IAAA,UAAE,EAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,gBAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,iCAAiC,CAAC,CAAC;QAClF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,6BAA6B;IAC7B,IAAA,UAAE,EAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,aAAa,GAAG,IAAA,WAAG,EAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAE7C,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAErB,gBAAM,CAAC,WAAW,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACnD,gBAAM,CAAC,WAAW,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, it, beforeEach } from 'mocha';\nimport assert from 'assert';\nimport { spy } from 'sinon';\nimport { Calculator } from './Calculator';\n\ndescribe('Calculator', () => {\n  let calculator: Calculator;\n\n  beforeEach(() => {\n    calculator = new Calculator();\n  });\n\n  describe('add', () => {\n    it('should add two numbers correctly', () => {\n      assert.strictEqual(calculator.add(2, 3), 5);\n    });\n\n    it('should handle negative numbers', () => {\n      assert.strictEqual(calculator.add(-2, 3), 1);\n    });\n  });\n\n  describe('subtract', () => {\n    it('should subtract two numbers correctly', () => {\n      assert.strictEqual(calculator.subtract(5, 3), 2);\n    });\n  });\n\n  describe('multiply', () => {\n    it('should multiply two numbers correctly', () => {\n      assert.strictEqual(calculator.multiply(4, 3), 12);\n    });\n  });\n\n  describe('divide', () => {\n    it('should divide two numbers correctly', () => {\n      assert.strictEqual(calculator.divide(6, 2), 3);\n    });\n\n    it('should throw error when dividing by zero', () => {\n      assert.throws(() => calculator.divide(6, 0), /Division by zero is not allowed/);\n    });\n  });\n\n  // Example of using Sinon spy\n  it('should track method calls', () => {\n    const calculatorSpy = spy(calculator, 'add');\n\n    calculator.add(2, 3);\n\n    assert.strictEqual(calculatorSpy.calledOnce, true);\n    assert.strictEqual(calculatorSpy.calledWith(2, 3), true);\n  });\n});\n"]}